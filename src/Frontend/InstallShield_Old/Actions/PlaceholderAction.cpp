#include "PlaceholderAction.h"
#include <string>
#include "IScript.h"

namespace oldis
{
	uint8_t numOperands[] = {
		0xff, 0x1, 0x1, 0x2, 0x3, 0x1, 0x0, 0x0, 0x2, 0x2, 0x1, 0x1, 0x1, 0x43, 0x2, 0x2, 0x81, 0x83, 0x82, 0x2, 0x2, 0x1, 0x2, 0x1, 0x4, 0x3, 0x2, 0xff, 0x82, 0x1, 0x3, 0x81, 0xc0, 0x2, 0x4, 0x2, 0x3, 0x84, 0x4, 0x4, 0x22, 0x3, 0x2, 0x0, 0x1, 0xff, 0x2, 0x1, 0x4, 0x2, 0x2, 0x62, 0x2, 0x2, 0x5, 0x2, 0x2, 0x2, 0x1, 0x2, 0x3, 0x2, 0x2, 0x2, 0x4, 0x2, 0x2, 0x1, 0x0, 0x4, 0x3, 0x1, 0x1, 0x3, 0x3, 0x4, 0x1, 0x1, 0x3, 0x3, 0x2, 0x2, 0x1, 0x1, 0x3, 0x3, 0x4, 0x1, 0x2, 0x2, 0x1, 0x1, 0x1, 0x4, 0x5, 0x4, 0x2, 0x3, 0x1, 0x1, 0x2, 0x1, 0x1, 0x2, 0x4, 0x3, 0x3, 0x4, 0x84, 0x2, 0x2, 0x1, 0x2, 0x1, 0x2, 0x2, 0x4, 0x2, 0x2, 0x2, 0x2, 0x5, 0x3, 0x3, 0x4, 0x4, 0x1, 0x2, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x1, 0x2, 0x2, 0x8, 0x41, 0x1, 0x1, 0x2, 0x3, 0x3, 0x3, 0x2, 0x3, 0x3, 0x2, 0x4, 0x2, 0x3, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x3, 0x2, 0x3, 0x2, 0x2, 0x2, 0x2, 0x1, 0x2, 0x2, 0x2, 0x3, 0x3, 0x3, 0xff, 0xff, 0xff, 0x1, 0x1, 0xf0, 0xf0, 0xf0, 0x1, 0x0, 0x1, 0x1, 0x1, 0x5, 0x5, 0x5, 0x5, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1, 0x2, 0x1, 0x8, 0x2, 0x3, 0x8, 0x3, 0x1, 0x1, 0x9, 0x1, 0x41, 0x1, 0x2, 0x82, 0x1, 0x4, 0x2, 0x3, 0x2, 0x2, 0x3, 0x3, 0x5, 0x4, 0x3, 0x3, 0x2, 0x43, 0x3, 0x2, 0x4, 0x5, 0x3, 0x2, 0x3, 0x5, 0x2, 0x1, 0x84, 0x85, 0x3, 0x3, 0x3, 0x1, 0x2, 0x2, 0x1, 0x2, 0x1, 0x4, 0x83, 0x2, 0x2, 0x2, 0x2, 0x1, 0x1, 0x3, 0x3, 0xf0, 0xf0, 0x3, 0x3, 0x5, 0x1, 0x1, 0x2, 0x1, 0x2, 0x1, 0x3, 0x3, 0x1, 0x1, 0x3, 0x4, 0x1, 0x2, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 0x0, 0x2, 0x1, 0x1, 0x2, 0xf0, 0x0, 0x5, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x44, 0x45, 0x43, 0x8, 0x44, 0x1, 0x1, 0x2, 0xc2, 0x1, 0x4, 0x4, 0x9, 0x42, 0x4, 0x4, 0x2, 0x2, 0x44, 0x4, 0x2, 0x3, 0x43, 0x2, 0x1, 0x2, 0x5, 0x5, 0x1, 0x41, 0x2, 0x3, 0x3, 0x44, 0x0, 0x2, 0x1, 0x1, 0x5, 0x5, 0x3, 0x4, 0x4, 0x4, 0x7, 0x3, 0x3, 0x2, 0x3, 0x3, 0x0, 0x3, 0x1, 0x2, 0xf0, 0x2, 0x1, 0x4, 0x1, 0x3, 0x5, 0x5, 0x6, 0x4, 0x5, 0x2, 0x83, 0x82, 0x5, 0x3, 0x3, 0x1, 0x5, 0x5, 0x5, 0x5, 0x5, 0x5, 0x1, 0x4, 0x2, 0x4, 0x2, 0x2, 0x2, 0x4, 0x4, 0x2, 0x1, 0x1, 0x2, 0x3, 0x2, 0x5, 0x1, 0x4, 0x3,
	};
	CPlaceholderAction::CPlaceholderAction(CIScript* script, StreamPtr& filePtr) :
		CActionWithArgs(script, filePtr)
	{
		if (m_actionId == 0xb4)
		{
			uint8_t _0x80;
			uint16_t PrototypeIndex;
			filePtr.Read(_0x80);
			filePtr.Read(PrototypeIndex);
			
			m_numOperands = m_script->GetFnById(PrototypeIndex).prototype->GetArguments().size();
			m_arguments.resize(m_numOperands);
			ParseArguments(filePtr);
		}
		else if (m_actionId == 0x103)
		{
			uint8_t _0x20;
			uint16_t numArgs;

			filePtr.Read(_0x20);
			filePtr.Read(numArgs);
			auto arg1 = ParseArgument(filePtr);
			auto arg2 = ParseArgument(filePtr);
			m_numOperands = numArgs - 2;
			m_arguments.resize(m_numOperands);
			ParseArguments(filePtr);
		}
		else if (m_actionId == 0x104)
		{
			uint8_t _0x20;
			uint16_t numArgs;

			filePtr.Read(_0x20);
			filePtr.Read(numArgs);
			auto arg1 = ParseArgument(filePtr);
			auto arg2 = ParseArgument(filePtr);
			auto arg3 = ParseArgument(filePtr);
			m_numOperands = numArgs - 3;
			m_arguments.resize(m_numOperands);
			ParseArguments(filePtr);
		}
		else if (m_actionId == 0x16d)
		{
			throw std::runtime_error("Unimplemented action 0x16d");
		}
		else if (m_actionId == 0x20)
		{ 
			throw std::runtime_error("Unimplemented action 0x20");
		}
		else
		{
			m_numOperands = numOperands[m_actionId] & 0x0f;
			m_arguments.resize(m_numOperands);
			ParseArguments(filePtr);
		}
	}

	void CPlaceholderAction::print(std::ostream& os) const
	{
		os << "PlaceholderAction (id: 0x" << std::hex << m_actionId << std::dec << "): ";
		size_t i = 0;
		for (auto arg : m_arguments)
		{
			os << " [" << i << "]: ";
			os << *arg;
			i++;
		}
	}

};
